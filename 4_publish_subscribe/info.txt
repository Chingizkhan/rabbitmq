The assumption behind a work queue is that each task is delivered to exactly one worker.
In this part we'll do something completely different -- we'll deliver a message to multiple consumers.
This pattern is known as "publish/subscribe".

Exchanges
In previous parts of the tutorial we sent and received messages to and from a queue.
Now it's time to introduce the full messaging model in Rabbit.

Let's quickly go over what we covered in the previous tutorials:

A producer is a user application that sends messages.
A queue is a buffer that stores messages.
A consumer is a user application that receives messages.
The core idea in the messaging model in RabbitMQ is that the producer never sends any messages directly to a queue.
Actually, quite often the producer doesn't even know if a message will be delivered to any queue at all.

Instead, the producer can only send messages to an exchange.
An exchange is a very simple thing. On one side it receives messages from producers and the other side it pushes them to queues.
The exchange must know exactly what to do with a message it receives.
Should it be appended to a particular queue? Should it be appended to many queues?
Or should it get discarded. The rules for that are defined by the exchange type.

There are a few exchange types available: direct, topic, headers and fanout. We'll focus on the last one -- the fanout.
The fanout exchange is very simple. As you can probably guess from the name, it just broadcasts all the messages it
receives to all the queues it knows. And that's exactly what we need for our logger.


Listing exchanges
To list the exchanges on the server you can run the ever useful rabbitmqctl:

sudo rabbitmqctl list_exchanges
In this list there will be some amq.* exchanges and the default (unnamed) exchange.
These are created by default, but it is unlikely you'll need to use them at the moment.

The default exchange
In previous parts of the tutorial we knew nothing about exchanges, but still were able to send messages to queues.
That was possible because we were using a default exchange, which is identified by the empty string ("").

Recall how we published a message before:

err = ch.PublishWithContext(ctx,
  "",     // exchange
  q.Name, // routing key
  false,  // mandatory
  false,  // immediate
  amqp.Publishing{
    ContentType: "text/plain",
    Body:        []byte(body),
})

Here we use the default or nameless exchange: messages are routed to the queue with the name specified by routing_key parameter,
if it exists.


//

Temporary queues
As you may remember previously we were using queues that had specific names (remember hello and task_queue?).
Being able to name a queue was crucial for us -- we needed to point the workers to the same queue. Giving a queue a name
is important when you want to share the queue between producers and consumers.

But that's not the case for our logger. We want to hear about all log messages, not just a subset of them.
We're also interested only in currently flowing messages not in the old ones. To solve that we need two things.

Firstly, whenever we connect to Rabbit we need a fresh, empty queue. To do this we could create a queue with a random name,
or, even better - let the server choose a random queue name for us.

Secondly, once we disconnect the consumer the queue should be automatically deleted.

In the amqp client, when we supply queue name as an empty string, we create a non-durable queue with a generated name:

q, err := ch.QueueDeclare(
  "",    // name
  false, // durable
  false, // delete when unused
  true,  // exclusive
  false, // no-wait
  nil,   // arguments
)
When the method returns, the queue instance contains a random queue name generated by RabbitMQ. For example
it may look like amq.gen-JzTY20BRgKO-HjmUJj0wLg.

When the connection that declared it closes, the queue will be deleted because it is declared as exclusive.

You can learn more about the exclusive flag and other queue properties in the guide on queues.

//

Listing bindings
You can list existing bindings using, you guessed it,

rabbitmqctl list_bindings